import{_ as o,i as s,o as a,a9 as t}from"./chunks/framework.PMW5hKiN.js";const u=JSON.parse('{"title":"Why DeepMove","description":"","frontmatter":{},"headers":[],"relativePath":"aptos/why.md","filePath":"aptos/why.md","lastUpdated":null}'),i={name:"aptos/why.md"};function n(r,e,l,p,d,h){return a(),s("div",null,e[0]||(e[0]=[t(`<h1 id="why-deepmove" tabindex="-1">Why DeepMove <a class="header-anchor" href="#why-deepmove" aria-label="Permalink to &quot;Why DeepMove&quot;">​</a></h1><h2 id="the-problems" tabindex="-1">The Problems <a class="header-anchor" href="#the-problems" aria-label="Permalink to &quot;The Problems&quot;">​</a></h2><p>Building Move applications is hard. Developers need to deal with lots of problems besides of learning move language.</p><ul><li>when run <code>aptos move build</code>, everytime the move compiler will try to pull AptosFramework repos from remote git urls, however the repo may be quite big and in windows os this process may be stucked up for quite a while</li></ul><p><code>Deepmove</code> solves it by making the remote move deps into local deps, therefor there will only one time pull request from remote git repos, moreover deepmove use <code>git sparsecheckout</code>, so it will only checkout the AptosFramework directory instead of the whole AptosFramework repos</p><ul><li>when publish and upgrade move packages in aptos cli, you will do a lot of things, you first need use <code>aptos init</code> to setup env, after you publish your package, you want to upgrade it, you must first remember the move package objectid onchain, and then you can pass it to the upgrade commands. Moreover, when you published in testnet env, and you want to publish in mainnet env, you must do the above things again</li></ul><p><code>Deepmove</code> solves these progresses all in simple commands, you setup your <code>APTOS_PRIVATE_KEY</code> in .env file, and get aptos coins in your favouite wallet, then you can just go publish and upgrade using the following commands</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">publish</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testnet</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">publish</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mainnet</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">upgrade</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testnet</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">upgrade</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mainnet</span></span></code></pre></div><ul><li>when you develop dapp in typescript language, and you have your move contract defined with complexed Move Structs, therefor you must deal with bcs serialization schema definitions in typescript, it is all need manual coded, and it is not quite easy for developers newer to move languages</li></ul><p><code>Deepmove</code> solves it by <code>deepauto</code> framework, with wasm based move bcs analysis, it will transalte <code>Move Structs</code>、<code>Move Functions</code> into typescript class、typescript functions, developers can use these bindings directly</p><h2 id="developer-experience" tabindex="-1">Developer Experience <a class="header-anchor" href="#developer-experience" aria-label="Permalink to &quot;Developer Experience&quot;">​</a></h2><p><code>Deepmove</code> allowing dapp developers to focus on building high-quality and performant experiences for Move based blockchains — by focusing on <strong>developer experience</strong>, <strong>performance</strong>, <strong>feature coverage</strong>, and <strong>stability.</strong></p><h2 id="feature-coverage" tabindex="-1">Feature Coverage <a class="header-anchor" href="#feature-coverage" aria-label="Permalink to &quot;Feature Coverage&quot;">​</a></h2><p><code>Deepmove</code> wasm vm runtime not only support <code>move_stdlib_natives</code>, it also support <code>aptos_framework_natives</code> and the crypto natives are all well tested in wasm vm runtime</p>`,14)]))}const m=o(i,[["render",n]]);export{u as __pageData,m as default};
